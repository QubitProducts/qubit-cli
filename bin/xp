#!/usr/bin/env node
const program = require('commander')
const path = require('path')
const exec = require('child_process').exec
const pkg = require('../package.json')
const scaffold = require('../src/cmd/scaffold')
const serve = require('../src/cmd/serve')
const up = require('../src/cmd/up')
const down = require('../src/cmd/down')

program
  .command('up')
  .description('push experience up to remote')
  .action(up)

program
  .command('down')
  .description('pull experience down from remote')
  .action(down)

program
  .command('scaffold <template>')
  .description('scaffold a project from a template')
  .action(scaffold)

program
  .command('open')
  .description('open xp folder in finder, e.g. to locate chrome-extension')
  .action(() => exec(`open ${path.dirname(__dirname)}`))

program
  .version(pkg.version)
  .arguments('<variation>')
  .option('-p, --port [port]', 'use custom [port]', Number, 41337)
  .option('-r, --require', 'wait for window.__qubit.amd')
  .option('-w, --watch', 'watch for changes and live reload')
  .option('-s, --sync', 'watch for changes and sync with remote')
  .action(serve)

program.on('--help', function () {
  console.log(`
  Examples:

    $ xp --help
    $ xp scaffold example
    $ xp variation.js --watch

    $ xp
      xp listening on port 41337
    $ open https://app.qubit.com/p/1234/experiences/5678/editor

      You recently navigated to https://app.qubit.com/p/1234/experiences/5678/editor
      Would you like xp to scaffold your local project from this experiment? (y/n)
      writing to local package.json file...
      writing to local global.js file...
      writing to local triggers.js file...
      writing to local variation-49937.js file...
      writing to local variation-49937.css file...
      writing to local variation-336711.js file...
      writing to local variation-336711.css file...
      All done!

    $ xp variation-336711.js --sync

      watching for changes
      xp listening on port 41337
      synced!

    $ xp up

      synced!

    $ xp down

      pulled!
  `)
})

program.parse(process.argv)

if (!program.args.length) serve('', program)
