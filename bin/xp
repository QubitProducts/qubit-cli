#!/usr/bin/env node
const path = require('path')
process.env.NODE_CONFIG_DIR = path.resolve(__dirname, '../config')
const program = require('commander')
const pkg = require('../package.json')
const exec = require('child_process').exec
const scaffold = require('../src/cmd/scaffold')
const serve = require('../src/cmd/serve')
const up = require('../src/cmd/up')
const down = require('../src/cmd/down')
const connect = require('../src/cmd/connect')
const login = require('../src/login')

program
  .command('login')
  .description('login to Qubit Experiences')
  .action(login)

program
  .command('up')
  .description('push experience up to remote')
  .action(up)

program
  .command('down')
  .description('pull experience down from remote')
  .action(down)

program
  .command('connect')
  .description('pull down experiences that you are editing in the platform')
  .action(connect)

program
  .command('scaffold <template>')
  .description('scaffold a project from a template')
  .action(scaffold)

program
  .command('open')
  .description('open xp folder in finder, e.g. to locate chrome-extension')
  .action(() => exec(`open ${path.dirname(__dirname)}`))

program
  .usage(`[varaition.js] [options]
         xp <cmd> [options]`)
  .version(pkg.version)
  .arguments('<variation>')
  .option('-w, --watch', 'watch for changes and live reload')
  .option('-s, --sync', 'watch for changes and sync with remote')
  .option('-v, --verbose', 'log verbose output', false)
  .action(serve)

program.on('--help', function () {
  console.log(`
  Examples:

    $ xp --help
    $ xp login
    $ xp scaffold example
    $ xp variation.js --watch
    $ xp variation.js --sync
    $ xp up
    $ xp down
    $ xp connect
  `)
})

program.parse(process.argv)
