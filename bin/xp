#!/usr/bin/env node
require('async-to-gen/register')
const chalk = require('chalk')
const path = require('path')
process.env.NODE_CONFIG_DIR = path.resolve(__dirname, '../config')
const program = require('commander')
const pkg = require('../package.json')
const log = require('../src/lib/log')
const pull = require('../src/cmd/pull')
const serve = require('../src/cmd/serve')
const push = require('../src/cmd/push')
const create = require('../src/cmd/create')
const previewLink = require('../src/cmd/preview-link')
const login = require('../src/cmd/login')
const open = require('../src/cmd/open')
const templatize = require('../src/cmd/templatize')
const opn = require('opn')

program
  .command('login')
  .description('login to the platform')
  .action(login)

program
  .command('create <propertyId>')
  .description('create an experience')
  .action(create)

program
  .command('push')
  .description('push experience up to remote')
  .action(push)

program
  .command('pull')
  .usage(`
         xp pull // pull from remote
         xp pull example // pull from template
         xp pull propertyId experienceId // pull from experience
  `)
  .description('pull experience from template, remote or experience editor')
  .action(pull)

program
  .command('templatize')
  .description('create a template from an experience')
  .action(templatize)

program
  .command('open')
  .description('opens the overview page for an experience')
  .action(open)

program
  .command('extension')
  .description('open xp folder in finder, e.g. to locate chrome-extension')
  .action(() => opn(`${path.dirname(__dirname)}`))

program
  .command('preview-link')
  .description('log sharable preview links for your variations')
  .action(() => previewLink().then((links) => links.map((link) => log(link))), log.error)

program
  .usage(`[options] <cmd>`)
  .version(pkg.version)
  .arguments('[variation]')
  .option('-w, --watch', 'watch for changes and live reload')
  .option('-s, --sync', 'watch for changes, live reload and also sync with remote on every change')
  .option('-v, --verbose', 'log verbose output', false)
  .action(serve)

program.on('--help', function () {
  console.log(`  To install the extension:
  $ ${chalk.green.bold('xp extension')}
  then drag the chrome-extension folder into chrome

  To quickly hack on something with no side effects:
  $ ${chalk.green.bold('xp pull example')}
  $ ${chalk.green.bold('xp --watch')}
  Now open chrome and turn on xp by clicking on the extension icon
  you should see the background of the page turn ${chalk.yellow.bold('yellow')}!

  To pull down an existing experience:
  - If you know the propertyId and experienceId: ${chalk.green.bold('xp pull propertyId experienceId')}
  - If you know the url: ${chalk.green.bold('xp pull https://app.qubit.com/p/{propertyId}/experiences/{experienceId}')}
  - Otherwise, type ${chalk.green.bold('xp pull')} and navigate to your experience and xp will guide you from there

  To create a new experience in the platform:
  $ ${chalk.green.bold('xp create propertyId')}
  note: propertyId is the number after /p/ in our urls

  To save your changes to the platform:
  $ ${chalk.green.bold('xp push')}

  To generate a template from a local experience:
  $ ${chalk.green.bold('xp templatize')}

  To pull an existing template into a local experience:
  $ ${chalk.green.bold('xp pull name-of-template')}

  To enable hot reloading:
  Implement a remove function in your variation file like so:

  function execution (options) {
    console.log('executing variation')
    return {
      remove: function remove () {
        // undo any changes e.g. $modal.remove()
      }
    }
  }

  `)
})

program.parse(process.argv)

if (!program.args.length) serve(null, program)
